export interface Plugin {
  createInstance?(options: PluginCreateInstanceMethodOptions): Promise<PluginCreateInstanceMethodReturn>;
  destroyInstance?(options: PluginDestroyInstanceMethodOptions): Promise<void>;
}

export abstract class Plugin<AuthenticationCredential extends string = string, InstanceField extends string = string> {
  public id: string;
  public name: string;
  public type: PluginType;
  public label: string;
  public version: string;
  public description: string;
  public author: string;
  public iconURL: string;
  public settings?: PluginSettings<AuthenticationCredential, InstanceField>;

  constructor({
    id,
    type,
    name,
    label,
    version,
    description,
    author,
    iconURL,
    settings,
  }: PluginInfo<AuthenticationCredential, InstanceField>) {
    this.id = id;
    this.type = type;
    this.name = name;
    this.label = label;
    this.version = version;
    this.description = description;
    this.author = author;
    this.iconURL = iconURL;
    this.settings = settings;
  }

  /**
   * Get information about the plugin.
   * @returns The plugin information.
   */
  public getPluginInfo(): PluginInfo<AuthenticationCredential, InstanceField> {
    return {
      id: this.id,
      type: this.type,
      name: this.name,
      label: this.label,
      version: this.version,
      description: this.description,
      author: this.author,
      iconURL: this.iconURL,
      settings: this.settings,
    };
  }

  public abstract validateCredentials(
    options: PluginValidateCredentialsMethodOptions<AuthenticationCredential, InstanceField>
  ): Promise<boolean>;
}

export interface PluginCommonMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> {
  /**
   * @param credentials - The credentials to use for the plugin.
   */
  credentials?: Record<AuthenticationCredential, string> | null;
  /**
   * @param instanceFields The plugin instance fields.
   * @example
   * {
   *  "location": "https://example.com/storage/1234",
   * }
   */
  instanceFields?: Record<InstanceField, string> | null;
  /**
   * @param authenticationMethod - The authentication method to use for the plugin.
   * @example PluginAuthenticationMethod.OAUTH
   */
  authenticationMethod: PluginAuthenticationMethod;
}

export interface PluginValidateCredentialsMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginCreateInstanceMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginCreateInstanceMethodReturn<InstanceField extends string = string> {
  instanceFields: {
    [key in InstanceField]?: string;
  };
}

export interface PluginDestroyInstanceMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginInfo<AuthenticationCredential extends string = string, InstanceField extends string = string> {
  /**
   * @param id - The plugin ID.
   * @example '@fleekhq/plugin-storage-aws-s3'
   */
  id: string;
  /**
   * The type of the plugin.
   * @example 'storage'
   */
  type: PluginType;
  /**
   * The key name of the plugin, it will be used to identify the plugin and access it via URLs.
   * @example 'aws-s3'
   */
  name: string;
  /**
   * The label of the plugin.
   * @example 'AWS S3'
   */
  label: string;
  /**
   * The description of the plugin.
   * @example 'AWS S3 Plugin'
   */
  description: string;
  /**
   * The version of the plugin.
   */
  version: string;
  /**
   * The author of the plugin.
   * @example 'FleekHQ'
   */
  author: string;
  /**
   * The icon of the plugin.
   * @example 'https://storage.googleapis.com/fleek-xyz.appspot.com/assets/images/plugins/aws-s3.svg'
   */
  iconURL: string;
  /**
   * The settings of the plugin, they are used to configure the plugin.
   */
  settings?: PluginSettings<AuthenticationCredential, InstanceField>;
}

export interface PluginSettings<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> {
  /**
   * The autorization information of the plugin.
   * @example [{ authenticationMethod: PluginAuthenticationMethod.OAUTH, credentials: [{ name: 'idToken', label: 'ID Token' }] }]
   */
  authentications: Partial<Record<PluginAuthenticationMethod, PluginField<AuthenticationCredential>[]>>;
  /**
   * The instance fields - used to manage the plugin instance.
   * @example [{ name: 'bucketName', label: 'Bucket Name' }, { name: 'region', label: 'Region' }]
   */
  instanceFields?: PluginField<InstanceField>[];
  /**
   * The flag to disable the plugin.
   * @default false
   */
  isDisabled?: boolean;
}

export interface PluginField<AuthenticationCredential extends string = string> {
  /**
   * The name of the credential.
   */
  name: AuthenticationCredential;
  /**
   * The label of the field, it will be display above the field in the UI.
   * @example 'AWS Access Key ID'
   */
  label: string;
  /**
   * The placeholder of the field, it will be display as an example value of the field in the UI.
   * @example 'Enter your AWS S3 access key'
   */
  placeholder?: string | null;
  /**
   * The type of the field, it will be used to display the field in the UI.
   * @default 'text'
   */
  type?: PluginFieldType | null;
  /**
   * The helper text of the field, it will be display under the field in the UI.
   * @example 'The API key of your AWS S3 account.'
   */
  helperText?: string | null;
  /**
   * The options of the field, they will be display as a select in the UI.
   * @example [{ label: 'AWS S3', value: 'aws-s3' }]
   */
  options?: PluginFieldOption[] | null;
  /**
   * Is field can be changed in the future.
   * @default true
   */
  isChangeable?: boolean | null;
  /**
   * Is credential required.
   * @default true
   */
  isRequired?: boolean | null;
}

export interface PluginFieldOption {
  /**
   * The label of field option.
   * @example 'AWS S3'
   */
  label: string;
  /**
   * The value of field option, it will be used to identify the field option.
   * @example 'aws-s3'
   */
  value: string;
}

// Utility types
export type PluginFields<AuthenticationCredential extends string> = Record<AuthenticationCredential, string>;

export const PluginFieldType = [
  /**
   * The field will be display as a text input in the UI.
   */
  'text',
  /**
   * The field will be display as a number input in the UI.
   */
  'number',
  /**
   * The field will be display as a hidden input in the UI.
   */
  'hidden',
  /**
   * The field will be display as a password input in the UI.
   */
  'password',
  /**
   * The field will be display as a select in the UI.
   */
  'select',
] as const;
export type PluginFieldType = typeof PluginFieldType[number];

export const PluginAuthenticationMethod = [
  /**
   * Credentials are provided by the user.
   */
  'BASIC',
  /**
   * Credentials were obtained from the OAuth flow.
   */
  'OAUTH',
] as const;
export type PluginAuthenticationMethod = typeof PluginAuthenticationMethod[number];

export const PluginType = [
  /**
   * Storage plugin.
   */
  'STORAGE',
  /**
   * Git plugin.
   */
  'GIT',
  /**
   * Content Delivery Network plugin.
   */
  'CDN',
  /**
   * Continuous Integration/Continuous Delivery plugin.
   */
  'CI_CD',
  /**
   * Domain Name System plugin.
   */
  'DNS',
] as const;
export type PluginType = typeof PluginType[number];
