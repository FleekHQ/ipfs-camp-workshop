import { Plugin, PluginCommonMethodOptions, PluginInfo } from '../plugin.interfaces';

export interface PluginGitCommonMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginGitGetRepositoriesMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginGitCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginGitGetRepositoryBranchesMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginGitCommonMethodOptions<AuthenticationCredential, InstanceField> {
  /**
   * The repository name to get the branches from.
   * @example 'fleek-xyz'
   */
  repositoryName: string;
  /**
   * The repository owner to get the branches from.
   * @example 'fleekhq'
   */
  repositoryOwner?: string;
}

export abstract class PluginGit<
  AuthenticationCredential extends string = string,
  InitializationField extends string = string
> extends Plugin<AuthenticationCredential, InitializationField> {
  constructor(info: Omit<PluginInfo<AuthenticationCredential, InitializationField>, 'type'>) {
    super({ ...info, type: 'GIT' });
  }
  /**
   * Get the list of repositories for the current user.
   * @param options Options for the request.
   * @returns A promise that resolves to the list of repositories.
   * @throws Error if the plugin is not initialized.
   */
  public abstract getRepositories(
    options: PluginGitGetRepositoriesMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<PluginGitRepository[]>;
  /**
   * Get the list of branches for a repository.
   * @param options Options for the request.
   * @returns A promise that resolves to the list of branches.
   * @throws Error if the plugin is not initialized.
   */
  public abstract getRepositoryBranches(
    options: PluginGitGetRepositoryBranchesMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<string[]>;
}

export interface PluginGitRepository {
  /**
   * The name of the repository.
   * @example 'my-repo'
   */
  name: string;
  /**
   * The URL of the repository's website.
   */
  url: string;
  /**
   * The repository owner.
   * @example 'fleekhq'
   */
  owner: string;
  /**
   * The URL of the repository owner's avatar.
   * @example 'https://avatars.githubusercontent.com/u/12345678?v=4'
   */
  ownerAvatarUrl?: string;
  /**
   * The visibility of the repository.
   * @example 'public'
   */
  visibility?: PluginGitRepositoryVisibility;
}

export const PluginGitRepositoryVisibility = [
  /**
   * The repository is private.
   */
  'private',
  /**
   * The repository is public.
   */
  'public',
] as const;
export type PluginGitRepositoryVisibility = typeof PluginGitRepositoryVisibility[number];
