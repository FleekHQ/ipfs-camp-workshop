import { Plugin, PluginCommonMethodOptions, PluginInfo } from '../plugin.interfaces';

export interface PluginCICDBuildDetails {
  id: string;
  status: PluginCICDBuildStatus;
  url?: string;
  startedAt?: string;
  finishedAt?: string;
}

export interface PluginCICDConfig {
  name: string;
  description: string;
  location: string;
  buildSpec: string;
}

export const PluginCICDBuildStatus = ['IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'TIMED_OUT', 'STOPPED', 'QUEUED'] as const;
export type PluginCICDBuildStatus = typeof PluginCICDBuildStatus[number];

export interface PluginCICDCommonMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginCICDGetAvailableConfigsMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export interface PluginCICDStartBuildMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {}

export type PluginCICDStartBuildMethodReturn = {
  buildId: string | number;
  buildUrl?: string;
};

export interface PluginCICDGetBuildDetailsMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
  /**
   * The ID of the build to download artifacts for.
   * @example 'build-123'
   */
  buildId: string;
}

export type PluginCICDGetBuildDetailsMethodReturn = PluginCICDBuildDetails;

export interface PluginCICDGetBuildLogsMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
  /**
   * The ID of the build to download artifacts for.
   * @example 'build-123'
   */
  buildId: string;
}

export interface PluginCICDDownloadBuildArtifactsMethodOptions<
  AuthenticationCredential extends string = string,
  InstanceField extends string = string
> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
  /**
   * The ID of the build to download artifacts for.
   * @example 'build-123'
   */
  buildId: string;
}

export abstract class PluginCICD<
  AuthenticationCredential extends string = string,
  InitializationField extends string = string
> extends Plugin<AuthenticationCredential, InitializationField> {
  constructor(info: Omit<PluginInfo<AuthenticationCredential, InitializationField>, 'type'>) {
    super({ ...info, type: 'CI_CD' });
  }

  public abstract getAvailableConfigs(
    options: PluginCICDGetAvailableConfigsMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<PluginCICDConfig[]>;

  public abstract startBuild(
    options: PluginCICDStartBuildMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<PluginCICDStartBuildMethodReturn>;

  public abstract getBuildDetails(
    options: PluginCICDGetBuildDetailsMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<PluginCICDGetBuildDetailsMethodReturn>;

  public abstract getBuildLogs(
    options: PluginCICDGetBuildLogsMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<string>;

  public abstract downloadBuildArtifacts(
    options: PluginCICDDownloadBuildArtifactsMethodOptions<AuthenticationCredential, InitializationField>
  ): Promise<string>;
}
