import { Plugin, PluginCommonMethodOptions, PluginInfo } from '../plugin.interfaces';
export declare type PluginStorageObjectType = 'folder' | 'file';
export interface PluginStorageObject {
    id: string;
    name: string;
    size?: number;
    type?: PluginStorageObjectType;
    path?: string;
    created?: string;
    modified?: string;
}
export interface PluginStorageCommonMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginStorageGetMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginStorageDownloadMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    objectId: string;
}
export interface PluginStorageDownloadMethodReturn {
    /**
     * @param file - The file to download.
     **/
    file: File;
}
export interface PluginStorageGetMethodReturn {
    /**
     * @param objects - The objects in the storage.
     */
    objects: PluginStorageObject[];
}
export interface PluginStorageUploadMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param files - The files to upload.
     */
    files: File[];
    /**
     * @param folderId - The folder id to upload the files to.
     */
    folderId?: string;
}
export declare type PluginStorageUploadMethodReturn = {
    instanceFields?: PluginCommonMethodOptions['instanceFields'];
} | undefined;
export interface PluginStorageDeleteMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param objectId The object id to delete.
     */
    objectId: string;
}
export interface PluginStorageRenameMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param objectId The object id to rename.
     */
    objectId: string;
    /**
     * @param newObjectName The new name for the object.
     */
    newObjectName: string;
}
export interface PluginStorageMoveMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param objectId The object id to move.
     */
    objectId: string;
    /**
     * @param destinationFolderId The destination folder id to move the object to. If not provided, the object will be moved to the root folder.
     */
    destinationFolderId?: string | null;
}
export interface PluginStorageDuplicateMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param objectId The object id to copy.
     */
    objectId: string;
    /**
     * @param newObjectName The new name for the object.
     */
    newObjectName?: string;
}
export interface PluginStorageCreateFolderMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param folderName The name of the folder to create.
     */
    folderName: string;
    /**
     * @param locationId The location id to create the folder in. It can be a folder id or the root id.
     */
    locationId?: string;
}
export interface PluginStorageDeleteFolderMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginStorageCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * @param folderId The folder id to delete.
     */
    folderId: string;
}
export declare abstract class PluginStorage<AuthenticationCredential extends string = string, InstanceField extends string = string> extends Plugin<AuthenticationCredential, InstanceField> {
    constructor(info: Omit<PluginInfo<AuthenticationCredential, InstanceField>, 'type'>);
    /**
     * Get objects. If destination id is not provided, it will return all objects in the root.
     * @param {GetMethodOptions} options Options for the request.
     * @returns {Promise<PluginStorageGetMethodReturn>} The objects in the storage.
     * @throws Error if the plugin is not initialized.
     */
    abstract get(options: PluginStorageGetMethodOptions<AuthenticationCredential, InstanceField>): Promise<PluginStorageGetMethodReturn>;
    /**
     * Upload an object.
     * @param {PluginStorageUploadMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If the object is not valid.
     * @throws Error if the plugin is not initialized.
     */
    abstract upload(options: PluginStorageUploadMethodOptions<AuthenticationCredential, InstanceField>): Promise<PluginStorageUploadMethodReturn>;
    /**
     * Delete an object.
     * @param {PluginStorageDeleteMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If the object does not exist.
     * @throws Error if the plugin is not initialized.
     */
    abstract delete(options: PluginStorageDeleteMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
    /**
     * Rename an object.
     * @param {PluginStorageRenameMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If an object does not exist.
     * @throws If the new name is not valid.
     * @throws Error if the plugin is not initialized.
     */
    abstract rename(options: PluginStorageRenameMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
    /**
     * Move an object to a new destination.
     * @param {PluginStorageMoveMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If an object does not exist.
     * @throws Error if the plugin is not initialized.
     */
    abstract move(options: PluginStorageMoveMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
    /**
     * Duplicate an object.
     * @param {PluginStorageDuplicateMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If an object does not exist.
     * @throws Error if the plugin is not initialized.
     */
    abstract duplicate(options: PluginStorageDuplicateMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
    /**
     * Create a folder.
     * @param {PluginStorageCreateFolderMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws Error if the parent folder does not exist.
     * @throws Error if the plugin is not initialized.
     */
    abstract createFolder(options: PluginStorageCreateFolderMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
    /**
     * Delete a folder.
     * @param {PluginStorageDeleteFolderMethodOptions} options Options for the request.
     * @returns {Promise<void>}
     * @throws If the folder does not exist.
     * @throws Error if the plugin is not initialized.
     */
    abstract deleteFolder(options: PluginStorageDeleteFolderMethodOptions<AuthenticationCredential, InstanceField>): Promise<void>;
}
//# sourceMappingURL=plugin-storage.interfaces.d.ts.map