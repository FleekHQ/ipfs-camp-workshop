import { Plugin, PluginCommonMethodOptions, PluginInfo } from '../plugin.interfaces';
export interface PluginCICDBuildDetails {
    id: string;
    status: PluginCICDBuildStatus;
    url?: string;
    startedAt?: string;
    finishedAt?: string;
}
export interface PluginCICDConfig {
    name: string;
    description: string;
    location: string;
    buildSpec: string;
}
export declare const PluginCICDBuildStatus: readonly ["IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "STOPPED", "QUEUED"];
export declare type PluginCICDBuildStatus = typeof PluginCICDBuildStatus[number];
export interface PluginCICDCommonMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginCICDGetAvailableConfigsMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginCICDStartBuildMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export declare type PluginCICDStartBuildMethodReturn = {
    buildId: string | number;
    buildUrl?: string;
};
export interface PluginCICDGetBuildDetailsMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * The ID of the build to download artifacts for.
     * @example 'build-123'
     */
    buildId: string;
}
export declare type PluginCICDGetBuildDetailsMethodReturn = PluginCICDBuildDetails;
export interface PluginCICDGetBuildLogsMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * The ID of the build to download artifacts for.
     * @example 'build-123'
     */
    buildId: string;
}
export interface PluginCICDDownloadBuildArtifactsMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCICDCommonMethodOptions<AuthenticationCredential, InstanceField> {
    /**
     * The ID of the build to download artifacts for.
     * @example 'build-123'
     */
    buildId: string;
}
export declare abstract class PluginCICD<AuthenticationCredential extends string = string, InitializationField extends string = string> extends Plugin<AuthenticationCredential, InitializationField> {
    constructor(info: Omit<PluginInfo<AuthenticationCredential, InitializationField>, 'type'>);
    abstract getAvailableConfigs(options: PluginCICDGetAvailableConfigsMethodOptions<AuthenticationCredential, InitializationField>): Promise<PluginCICDConfig[]>;
    abstract startBuild(options: PluginCICDStartBuildMethodOptions<AuthenticationCredential, InitializationField>): Promise<PluginCICDStartBuildMethodReturn>;
    abstract getBuildDetails(options: PluginCICDGetBuildDetailsMethodOptions<AuthenticationCredential, InitializationField>): Promise<PluginCICDGetBuildDetailsMethodReturn>;
    abstract getBuildLogs(options: PluginCICDGetBuildLogsMethodOptions<AuthenticationCredential, InitializationField>): Promise<string>;
    abstract downloadBuildArtifacts(options: PluginCICDDownloadBuildArtifactsMethodOptions<AuthenticationCredential, InitializationField>): Promise<string>;
}
//# sourceMappingURL=plugin-ci-cd.interfaces.d.ts.map