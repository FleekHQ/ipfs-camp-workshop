import { Plugin, PluginCommonMethodOptions, PluginInfo } from '../plugin.interfaces';
export interface PluginDnsObject {
    domain: string;
    pointer: string;
    verified: boolean;
}
export interface PluginDnsCommonMethodOptions<FieldName extends string> extends PluginCommonMethodOptions<FieldName> {
    /**
     * @param domain - The domain to use.
     */
    domain: string;
}
export interface PluginDnsVerifyDomainMethodOptions<FieldName extends string> extends PluginDnsCommonMethodOptions<FieldName> {
    /**
     * @param pointer - Corresponding name system implementation site identifier.
     */
    pointer: string;
}
export interface PluginDnsGetDomainInfoMethodOptions<FieldName extends string> extends PluginDnsCommonMethodOptions<FieldName> {
}
export interface PluginDnsGetDomainInfoMethodReturn {
    /**
     * @param domain - Domain sent to get info from.
     */
    domain: string;
    /**
     * @param owner - Owner (optional).
     */
    owner?: string;
    /**
     * @param owner - Registrant (optional).
     */
    registrant?: string;
}
export declare abstract class PluginDns<FieldName extends string> extends Plugin<FieldName> {
    constructor(info: Omit<PluginInfo<FieldName>, 'type'>);
    /**
     * Get domain's info.
     * @param options Options for the request.
     * @returns A promise with the information for the provided domain.
     * @throws Error if the plugin is not initialized.
     */
    abstract getDomainInfo(options: PluginDnsGetDomainInfoMethodOptions<FieldName>): Promise<PluginDnsGetDomainInfoMethodReturn>;
    /**
     * Verifies domain gets resolved correctly in corresponding name system provider.
     * @param options Options for the request.
     * @returns Updated dns information for the provided options.
     * @throws Error if the plugin is not initialized.
     */
    abstract verifyDomain(options: PluginDnsVerifyDomainMethodOptions<FieldName>): Promise<PluginDnsObject>;
}
//# sourceMappingURL=plugin-dns.interfaces.d.ts.map