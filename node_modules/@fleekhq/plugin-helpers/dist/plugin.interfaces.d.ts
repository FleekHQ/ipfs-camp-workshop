export interface Plugin {
    createInstance?(options: PluginCreateInstanceMethodOptions): Promise<PluginCreateInstanceMethodReturn>;
    destroyInstance?(options: PluginDestroyInstanceMethodOptions): Promise<void>;
}
export declare abstract class Plugin<AuthenticationCredential extends string = string, InstanceField extends string = string> {
    id: string;
    name: string;
    type: PluginType;
    label: string;
    version: string;
    description: string;
    author: string;
    iconURL: string;
    settings?: PluginSettings<AuthenticationCredential, InstanceField>;
    constructor({ id, type, name, label, version, description, author, iconURL, settings, }: PluginInfo<AuthenticationCredential, InstanceField>);
    /**
     * Get information about the plugin.
     * @returns The plugin information.
     */
    getPluginInfo(): PluginInfo<AuthenticationCredential, InstanceField>;
    abstract validateCredentials(options: PluginValidateCredentialsMethodOptions<AuthenticationCredential, InstanceField>): Promise<boolean>;
}
export interface PluginCommonMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> {
    /**
     * @param credentials - The credentials to use for the plugin.
     */
    credentials?: Record<AuthenticationCredential, string> | null;
    /**
     * @param instanceFields The plugin instance fields.
     * @example
     * {
     *  "location": "https://example.com/storage/1234",
     * }
     */
    instanceFields?: Record<InstanceField, string> | null;
    /**
     * @param authenticationMethod - The authentication method to use for the plugin.
     * @example PluginAuthenticationMethod.OAUTH
     */
    authenticationMethod: PluginAuthenticationMethod;
}
export interface PluginValidateCredentialsMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginCreateInstanceMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginCreateInstanceMethodReturn<InstanceField extends string = string> {
    instanceFields: {
        [key in InstanceField]?: string;
    };
}
export interface PluginDestroyInstanceMethodOptions<AuthenticationCredential extends string = string, InstanceField extends string = string> extends PluginCommonMethodOptions<AuthenticationCredential, InstanceField> {
}
export interface PluginInfo<AuthenticationCredential extends string = string, InstanceField extends string = string> {
    /**
     * @param id - The plugin ID.
     * @example '@fleekhq/plugin-storage-aws-s3'
     */
    id: string;
    /**
     * The type of the plugin.
     * @example 'storage'
     */
    type: PluginType;
    /**
     * The key name of the plugin, it will be used to identify the plugin and access it via URLs.
     * @example 'aws-s3'
     */
    name: string;
    /**
     * The label of the plugin.
     * @example 'AWS S3'
     */
    label: string;
    /**
     * The description of the plugin.
     * @example 'AWS S3 Plugin'
     */
    description: string;
    /**
     * The version of the plugin.
     */
    version: string;
    /**
     * The author of the plugin.
     * @example 'FleekHQ'
     */
    author: string;
    /**
     * The icon of the plugin.
     * @example 'https://storage.googleapis.com/fleek-xyz.appspot.com/assets/images/plugins/aws-s3.svg'
     */
    iconURL: string;
    /**
     * The settings of the plugin, they are used to configure the plugin.
     */
    settings?: PluginSettings<AuthenticationCredential, InstanceField>;
}
export interface PluginSettings<AuthenticationCredential extends string = string, InstanceField extends string = string> {
    /**
     * The autorization information of the plugin.
     * @example [{ authenticationMethod: PluginAuthenticationMethod.OAUTH, credentials: [{ name: 'idToken', label: 'ID Token' }] }]
     */
    authentications: Partial<Record<PluginAuthenticationMethod, PluginField<AuthenticationCredential>[]>>;
    /**
     * The instance fields - used to manage the plugin instance.
     * @example [{ name: 'bucketName', label: 'Bucket Name' }, { name: 'region', label: 'Region' }]
     */
    instanceFields?: PluginField<InstanceField>[];
    /**
     * The flag to disable the plugin.
     * @default false
     */
    isDisabled?: boolean;
}
export interface PluginField<AuthenticationCredential extends string = string> {
    /**
     * The name of the credential.
     */
    name: AuthenticationCredential;
    /**
     * The label of the field, it will be display above the field in the UI.
     * @example 'AWS Access Key ID'
     */
    label: string;
    /**
     * The placeholder of the field, it will be display as an example value of the field in the UI.
     * @example 'Enter your AWS S3 access key'
     */
    placeholder?: string | null;
    /**
     * The type of the field, it will be used to display the field in the UI.
     * @default 'text'
     */
    type?: PluginFieldType | null;
    /**
     * The helper text of the field, it will be display under the field in the UI.
     * @example 'The API key of your AWS S3 account.'
     */
    helperText?: string | null;
    /**
     * The options of the field, they will be display as a select in the UI.
     * @example [{ label: 'AWS S3', value: 'aws-s3' }]
     */
    options?: PluginFieldOption[] | null;
    /**
     * Is field can be changed in the future.
     * @default true
     */
    isChangeable?: boolean | null;
    /**
     * Is credential required.
     * @default true
     */
    isRequired?: boolean | null;
}
export interface PluginFieldOption {
    /**
     * The label of field option.
     * @example 'AWS S3'
     */
    label: string;
    /**
     * The value of field option, it will be used to identify the field option.
     * @example 'aws-s3'
     */
    value: string;
}
export declare type PluginFields<AuthenticationCredential extends string> = Record<AuthenticationCredential, string>;
export declare const PluginFieldType: readonly ["text", "number", "hidden", "password", "select"];
export declare type PluginFieldType = typeof PluginFieldType[number];
export declare const PluginAuthenticationMethod: readonly ["BASIC", "OAUTH"];
export declare type PluginAuthenticationMethod = typeof PluginAuthenticationMethod[number];
export declare const PluginType: readonly ["STORAGE", "GIT", "CDN", "CI_CD", "DNS"];
export declare type PluginType = typeof PluginType[number];
//# sourceMappingURL=plugin.interfaces.d.ts.map