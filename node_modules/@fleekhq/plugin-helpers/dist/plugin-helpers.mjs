var p = Object.defineProperty;
var d = (s, t, e) => t in s ? p(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var i = (s, t, e) => (d(s, typeof t != "symbol" ? t + "" : t, e), e);
class n {
  constructor({
    id: t,
    type: e,
    name: o,
    label: r,
    version: c,
    description: a,
    author: u,
    iconURL: l,
    settings: h
  }) {
    i(this, "id");
    i(this, "name");
    i(this, "type");
    i(this, "label");
    i(this, "version");
    i(this, "description");
    i(this, "author");
    i(this, "iconURL");
    i(this, "settings");
    this.id = t, this.type = e, this.name = o, this.label = r, this.version = c, this.description = a, this.author = u, this.iconURL = l, this.settings = h;
  }
  getPluginInfo() {
    return {
      id: this.id,
      type: this.type,
      name: this.name,
      label: this.label,
      version: this.version,
      description: this.description,
      author: this.author,
      iconURL: this.iconURL,
      settings: this.settings
    };
  }
}
const D = [
  "text",
  "number",
  "hidden",
  "password",
  "select"
], P = [
  "BASIC",
  "OAUTH"
], y = [
  "STORAGE",
  "GIT",
  "CDN",
  "CI_CD",
  "DNS"
], C = ["IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "STOPPED", "QUEUED"];
class E extends n {
  constructor(t) {
    super({ ...t, type: "CI_CD" });
  }
}
class I extends n {
  constructor(t) {
    super({ ...t, type: "GIT" });
  }
}
const T = [
  "private",
  "public"
];
class m extends n {
  constructor(t) {
    super({ ...t, type: "STORAGE" });
  }
}
class R extends n {
  constructor(t) {
    super({ ...t, type: "DNS" });
  }
}
const U = (s) => {
  const [, t] = s.name.split("/");
  return {
    name: t,
    packageName: s.name,
    author: s.author,
    version: s.version,
    description: s.description
  };
};
export {
  n as Plugin,
  P as PluginAuthenticationMethod,
  E as PluginCICD,
  C as PluginCICDBuildStatus,
  R as PluginDns,
  D as PluginFieldType,
  I as PluginGit,
  T as PluginGitRepositoryVisibility,
  m as PluginStorage,
  y as PluginType,
  U as getPackageData
};
